package mocks

import mock "github.com/stretchr/testify/mock"
import storage "github.com/jimeh/ozu.io/storage"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Store) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: UID, URL
func (_m *Store) Create(UID []byte, URL []byte) (*storage.Record, error) {
	ret := _m.Called(UID, URL)

	var r0 *storage.Record
	if rf, ok := ret.Get(0).(func([]byte, []byte) *storage.Record); ok {
		r0 = rf(UID, URL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(UID, URL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByUID provides a mock function with given fields: UID
func (_m *Store) DeleteByUID(UID []byte) (*storage.Record, error) {
	ret := _m.Called(UID)

	var r0 *storage.Record
	if rf, ok := ret.Get(0).(func([]byte) *storage.Record); ok {
		r0 = rf(UID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(UID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByURL provides a mock function with given fields: URL
func (_m *Store) DeleteByURL(URL []byte) (*storage.Record, error) {
	ret := _m.Called(URL)

	var r0 *storage.Record
	if rf, ok := ret.Get(0).(func([]byte) *storage.Record); ok {
		r0 = rf(URL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(URL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUID provides a mock function with given fields: UID
func (_m *Store) FindByUID(UID []byte) (*storage.Record, error) {
	ret := _m.Called(UID)

	var r0 *storage.Record
	if rf, ok := ret.Get(0).(func([]byte) *storage.Record); ok {
		r0 = rf(UID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(UID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByURL provides a mock function with given fields: URL
func (_m *Store) FindByURL(URL []byte) (*storage.Record, error) {
	ret := _m.Called(URL)

	var r0 *storage.Record
	if rf, ok := ret.Get(0).(func([]byte) *storage.Record); ok {
		r0 = rf(URL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(URL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NextSequence provides a mock function with given fields:
func (_m *Store) NextSequence() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ storage.Store = (*Store)(nil)
